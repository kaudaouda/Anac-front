import apiService from './api';

class AuthService {
  constructor() {
    // Initialiser isAuthenticated de mani√®re synchrone
    this.isAuthenticated = this.checkAuthStatusSync();
  }

  // V√©rifier si l'utilisateur est connect√© (version synchrone pour le constructeur)
  checkAuthStatusSync() {
    // V√©rifier le cookie d'authentification
    const isAuthCookie = this.getCookie('is_authenticated');
    return isAuthCookie === 'true';
  }

  // V√©rifier si l'utilisateur est connect√© (version asynchrone pour l'API)
  async checkAuthStatus() {
    try {
      const response = await apiService.get('/auth/check-auth/');
      this.isAuthenticated = true;
      return response;
    } catch (error) {
      this.isAuthenticated = false;
      this.clearAuth();
      throw error;
    }
  }

  // Inscription d'un nouvel utilisateur
  async register(userData) {
    try {
      console.log('üîê Tentative d\'inscription avec les donn√©es:', userData);
      
      const response = await apiService.post('/auth/register/', userData);
      
      console.log('‚úÖ Inscription r√©ussie:', response);
      
      if (response.success) {
        this.isAuthenticated = true;
        // Les cookies sont automatiquement d√©finis par le serveur
      }
      
      return response;
    } catch (error) {
      console.error('Erreur lors de l\'inscription:', error);
      console.error('Donn√©es envoy√©es:', userData);
      
      // Am√©liorer le message d'erreur pour l'utilisateur
      if (error.message.includes('400')) {
        throw new Error('Donn√©es invalides. V√©rifiez que tous les champs sont correctement remplis.');
      } else if (error.message.includes('409')) {
        throw new Error('Un compte avec cet email existe d√©j√†.');
      } else if (error.message.includes('500')) {
        throw new Error('Erreur serveur. Veuillez r√©essayer plus tard.');
      } else {
        throw new Error(`Erreur lors de la cr√©ation du compte: ${error.message}`);
      }
    }
  }

  // Connexion utilisateur
  async login(credentials) {
    try {
      const response = await apiService.post('/auth/login/', credentials);
      
      if (response.success) {
        this.isAuthenticated = true;
        // Les cookies sont automatiquement d√©finis par le serveur
      }
      
      return response;
    } catch (error) {
      throw error;
    }
  }

  // D√©connexion utilisateur
  async logout() {
    try {
      await apiService.post('/auth/logout/');
    } catch (error) {
      console.error('Erreur lors de la d√©connexion:', error);
    } finally {
      this.clearAuth();
    }
  }

  // Rafra√Æchir le token d'acc√®s
  async refreshToken() {
    try {
      const response = await apiService.post('/auth/refresh-token/');
      
      if (response.success) {
        // Le cookie d'acc√®s est automatiquement mis √† jour par le serveur
        return true;
      }
      
      return false;
    } catch (error) {
      console.error('Erreur lors du rafra√Æchissement du token:', error);
      this.clearAuth();
      throw error;
    }
  }

  // R√©cup√©rer le profil utilisateur
  async getProfile() {
    try {
      const response = await apiService.get('/auth/profile/');
      return response;
    } catch (error) {
      throw error;
    }
  }

  // Mettre √† jour le profil utilisateur
  async updateProfile(profileData) {
    try {
      const response = await apiService.patch('/auth/profile/', profileData);
      return response;
    } catch (error) {
      throw error;
    }
  }

  // Changer le mot de passe
  async changePassword(passwordData) {
    try {
      const response = await apiService.post('/auth/change-password/', passwordData);
      return response;
    } catch (error) {
      throw error;
    }
  }

  // Demander la r√©initialisation du mot de passe
  async requestPasswordReset(email) {
    try {
      const response = await apiService.post('/auth/password-reset/', { email });
      return response;
    } catch (error) {
      throw error;
    }
  }

  // R√©cup√©rer les informations utilisateur depuis le cookie
  getUser() {
    try {
      // Essayer de r√©cup√©rer les informations utilisateur depuis l'API
      // car les cookies HttpOnly ne sont pas accessibles c√¥t√© client
      return null;
    } catch (error) {
      return null;
    }
  }

  // Nettoyer l'authentification
  clearAuth() {
    // Supprimer le cookie d'authentification c√¥t√© client
    this.deleteCookie('is_authenticated');
    this.isAuthenticated = false;
  }

  // Utilitaires pour les cookies
  getCookie(name) {
    const value = `; ${document.cookie}`;
    const parts = value.split(`; ${name}=`);
    if (parts.length === 2) return parts.pop().split(';').shift();
    return null;
  }

  deleteCookie(name) {
    document.cookie = `${name}=; expires=Thu, 01 Jan 1970 00:00:00 UTC; path=/;`;
  }

  // V√©rifier si l'utilisateur est connect√©
  isUserAuthenticated() {
    return this.isAuthenticated;
  }

  // M√©thode pour forcer la v√©rification de l'authentification
  async forceAuthCheck() {
    try {
      await this.checkAuthStatus();
      return this.isAuthenticated;
    } catch (error) {
      this.isAuthenticated = false;
      return false;
    }
  }
}

export default new AuthService();
